1.websocketpp 编译运行启动server
	先装上 ASIO:sudo apt-get install libasio-dev
	不加密编译：
		g++ -o echo_server echo_server.cpp  -I../../ -L/usr/lib/x86_64-linux-gnu/  -lpthread -std=c++11  -D_WEBSOCKETPP_CPP11_STL_ -DASIO_STANDALONE
		g++ -o echo_client echo_client.cpp  -I../../ -L/usr/lib/x86_64-linux-gnu/  -lpthread -std=c++11  -D_WEBSOCKETPP_CPP11_STL_ -DASIO_STANDALONE 
	tls加密编译：
		g++ -o echo_server_tls echo_server_tls.cpp  -I../../ -L/usr/lib/x86_64-linux-gnu/  -lpthread -std=c++11  -D_WEBSOCKETPP_CPP11_STL_ -DASIO_STANDALONE   -lssl -lcrypto
		g++ -o echo_client_tls echo_client_tls.cpp  -I../../ -L/usr/lib/x86_64-linux-gnu/  -lpthread -std=c++11  -D_WEBSOCKETPP_CPP11_STL_ -DASIO_STANDALONE   -lssl -lcrypto



2.libwensockets 编译运行启动server
	确保cmake、openssl安装成功
		$：sudo apt-get install cmake
		$：sudo apt-get install openssl 
		$：sudo apt-get install libssl-dev
	下载、编译及安装libwebsockets
		$：git clone https://github.com/warmcat/libwebsockets.git
		$：cd libwebsockets
		$：mkdir build
		$：cd build
		$：cmake ..
		$：make
		$：sudo make install
		$:~/work/libwebsockets/build$ libwebsockets-test-
		$:~/work/libwebsockets/build$ libwebsockets-test-server
		$:~/work/libwebsockets/build/bin$ libwebsockets-test-server
		注释：运行服务后访问服务器端的7681端口
	附加：参考博客用C改写的websocket服务器端（包括二进制加密：sha1加密和base64编码解码）


3.pywebsocket 编译运行启动server
	git 命令下载：git clone https://github.com/google/pywebsocket.git
	解压下载的文件,进入 pywebsocket 目录,执行命令：
		$：python setup.py build
		$：sudo python setup.py install
	查看文档说明:pydoc mod_pywebsocket
	开启服务,在 pywebsocket/mod_pywebsocket 目录下执行以下命令：
		$：sudo python standalone.py -p 9998 -w ../example/
		注释：开启一个端口号为 9998 的服务，使用 -w 来设置处理程序 echo_wsh.py 所在的目录



